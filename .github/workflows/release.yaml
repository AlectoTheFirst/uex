name: Release Exporter Binary

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-release:
    name: Build and Release Binaries
    runs-on: ["ubuntu-latest"]
    strategy:
      matrix:
        go-version: ['1.23']
        platform:
          - { os: 'linux', arch: 'amd64' }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download Go modules
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="uex"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          OUTPUT_DIR="dist"
          OUTPUT_PATH="${OUTPUT_DIR}/${BINARY_NAME}-${GOOS}-${GOARCH}"
          mkdir -p ${OUTPUT_DIR}
          
          # Extract version information for ldflags
          VERSION=${GITHUB_REF#refs/tags/}
          COMMIT=$(git rev-parse --short HEAD)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GO_VERSION=$(go version | awk '{print $3}')
          
          # Set ldflags for version information
          LDFLAGS="-s -w"
          LDFLAGS="$LDFLAGS -X 'main.Version=${VERSION}'"
          LDFLAGS="$LDFLAGS -X 'main.Revision=${COMMIT}'"
          LDFLAGS="$LDFLAGS -X 'main.Branch=${BRANCH}'"
          LDFLAGS="$LDFLAGS -X 'main.BuildDate=${BUILD_DATE}'"
          LDFLAGS="$LDFLAGS -X 'main.GoVersion=${GO_VERSION}'"
          
          echo "Building ${OUTPUT_PATH}..."
          go build -v -trimpath -ldflags="${LDFLAGS}" -o "${OUTPUT_PATH}" ./cmd/velocloud-exporter
          echo "Binary built at ${OUTPUT_PATH}"

      - name: Generate Checksum
        run: |
          cd dist
          BINARY_FILE=$(ls velocloud-exporter-${{ matrix.platform.os }}-${{ matrix.platform.arch }}*)
          sha256sum "${BINARY_FILE}" > "${BINARY_FILE}.sha256"
          echo "Checksum generated for ${BINARY_FILE}"
          ls -l
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@c5a1e59f8c9f3f5f5c8dca8f6e3b4b3b3cc9c0b6
        with:
          name: binaries-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: dist/*

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ["azvision", "auto1"]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-dist
    
      - name: List downloaded artifacts
        run: ls -R all-dist
    
      - name: Upload Assets to Existing Release
        run: |
          echo "Uploading assets to existing release ${{ github.ref_name }}"
          find all-dist -type f -print0 | while IFS= read -r -d $'\0' file; do
              echo "Uploading $file"
              # Use --clobber to overwrite existing files with the same name if needed
              gh release upload ${{ github.ref_name }} "$file" --repo ${{ github.repository }}
          done
